import streamlit as st
import pandas as pd
import numpy as np
from scipy.interpolate import interp1d
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, time
import os

# Configuration de la page
st.set_page_config(page_title="√âoB√©nin", layout="wide", page_icon="üå¨Ô∏è")

# Style CSS personnalis√©
st.markdown("""
<style>
    .stApp {
        # background-color: #f0f4f8;
    }
    .sidebar .sidebar-content {
        background-color: #2c3e50;
        color: white;
    }
    .stButton>button {
        background-color: #3498db;
        color: white;
        border-radius: 10px;
    }
    .stButton>button:hover {
        background-color: black !important;
        color: red !important;
    }
    
    .stTextInput>div>div>input, .stNumberInput>div>div>input {
        border-radius: 8px;
    }
    h1, h2, h3 {
        color: #2c3e50;
    }
    .metric-card {
        background-color: black;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Chargement des donn√©es et du mod√®le
@st.cache_data
def load_data_and_model():
  current_dir = os.path.dirname(os.path.abspath(__file__))
    csv_path = os.path.join(current_dir, "nasa_power_data.csv")
    if not os.path.exists(csv_path):
        st.error(f"Le fichier {csv_path} est introuvable.")
        return None, None, None, None, None
    df = pd.read_csv(csv_path)
    df['timestamp'] = pd.to_datetime(df['timestamp'])

    curve_path = os.path.join(current_dir, "courbe_puissance.csv")
    if not os.path.exists(curve_path):
        st.error(f"Le fichier {curve_path} est introuvable.")
        return None, None, None, None, None
    df_curve_power = pd.read_csv(curve_path)
    power_curve = interp1d(df_curve_power["wind_speed"], df_curve_power["power"], bounds_error=False, fill_value=0)

    model_xgb1 = XGBRegressor()
    model_path1 = os.path.join(current_dir, "model_xgb_eolienne.json")
    if not os.path.exists(model_path1):
        st.error(f"Le fichier {model_path1} est introuvable.")
        return None, None, None, None, None
    try:
        model_xgb1.load_model(model_path1)
    except Exception as e:
        st.error(f"Erreur lors du chargement de {model_path1}: {str(e)}")
        return None, None, None, None, None

    model_xgb2 = XGBRegressor()
    model_path2 = os.path.join(current_dir, "model_xgb_eolienne2.json")
    if not os.path.exists(model_path2):
        st.error(f"Le fichier {model_path2} est introuvable.")
        return None, None, None, None, None
    try:
        model_xgb2.load_model(model_path2)
    except Exception as e:
        st.error(f"Erreur lors du chargement de {model_path2}: {str(e)}")
        return None, None, None, None, None

    return df, df_curve_power, power_curve, model_xgb1, model_xgb2

df, df_curve_power, power_curve, model_xgb1, model_xgb2 = load_data_and_model()

model_xgb = model_xgb1
# Barre de navigation
st.sidebar.title("üå¨Ô∏è √âoB√©nin")
page = st.sidebar.radio("Navigation", ["Accueil", "Pr√©diction", "R√©sultats", "Documentation", "√Ä propos"])

# Page d'Accueil
if page == "Accueil":
    st.title("Pr√©diction de l'√ânergie √âolienne pour un B√©nin Durable")
    st.image("graphique/head.jpeg", width=5000)
    st.markdown("<h3 style='text-align: center; font-style: italic; color: #555;'>L'IA au service de l'√©nergie renouvelable au B√©nin</h3>", unsafe_allow_html=True)
    
    st.info("""
    **Bienvenue sur la plateforme √âoB√©nin !** Cet outil vous permet de pr√©dire la vitesse du vent et d'estimer la puissance g√©n√©r√©e par une √©olienne Enercon E48/800,
    facilitant ainsi la transition vers un avenir √©nerg√©tique durable √† Cotonou.
    """)
    
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.image("graphique/resultat.png")
        st.markdown("""
            <p style="text-align: justify;">
                Explorer les r√©sultats des mod√®les de pr√©diction.
            </p>
            <a href="" style="float: right; text-decoration: none;">Decouvrire ‚Üí</a>
                    """, unsafe_allow_html=True)
    with col2:
        st.image("graphique/visualise.png")
        st.markdown("""
            <p style="text-align: justify;">
                Visualiser les pr√©visions horaires de vitesse du vent et du pr√©diction √©olienne.
            </p>
            <a href="" style="float: right; text-decoration: none;">Decouvrire ‚Üí</a>
                    """, unsafe_allow_html=True)
    with col3:
        st.image("graphique/impact.jpeg") 
        st.markdown("""
            <p style="text-align: justify;">
                Comprendre les impacts environnementaux, sociaux et op√©rationnels.
            </p>
            <a href="" style="float: right; text-decoration: none;">Decouvrire ‚Üí</a>
                    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Faire une pr√©diction"):
            st.session_state.page = "Pr√©diction"
    with col2:
        if st.button("Voir les r√©sultats"):
            st.session_state.page = "R√©sultats"
    
        
# # Page de Pr√©diction
elif page == "Pr√©diction":
    st.title("Pr√©diction et Estimation de Puissance üîÆ")
    st.markdown("Entrez les param√®tres ci-dessous pour lancer une pr√©diction.")
    
    col1, col2 = st.columns([2, 2])
    with col1:
        st.subheader("Mode de Pr√©diction")
        prediction_mode = st.selectbox("**Mode de pr√©diction**", [
        "Param√®tres m√©t√©o uniquement",
        "Param√®tres m√©t√©o & temps",
        "Temps uniquement (√Ä venir)",
        "Vitesse du vents",
        ])
    with col2:
        st.subheader("Param√®tres d'Entr√©e")
        if prediction_mode in ["Param√®tres m√©t√©o uniquement", "Param√®tres m√©t√©o & temps"]:
            col1, col2 = st.columns(2)
            with col1:
                temp = st.number_input("Temp√©rature (¬∞C)", -50.0, 50.0, 0.0)
                humidity = st.number_input("Humidit√© (%)", 0.0, 100.0, 0.0)
            with col2:
                pressure = st.number_input("Pression (hPa)", 0.0, 1200.0, 0.0)
                precipitation = st.number_input("Pr√©cipitations (mm)", 0.0, 100.0, 0.0)
        if prediction_mode in ["Param√®tres m√©t√©o & temps", "Temps uniquement"]:
            col1, col2 = st.columns(2)
            with col1:
                # timestamp = st.date_input("Date", value=datetime.now())
                # 1. S√©lection de la date
                selected_date = st.date_input("Choisissez une date", value=datetime(2019, 1, 1).date())  
            with col2:
                # 2. Liste des heures de 00:00 √† 23:00
                selected_hour = st.selectbox("Choisissez l'heure", [time(h, 0) for h in range(24)])
            # 3. Combinaison de la date et de l'heure
            timestamp = datetime.combine(selected_date, selected_hour)
            timestamp = pd.to_datetime(timestamp)
        if prediction_mode == "Vitesse du vents":
            wind_speed = st.number_input("Vitesse du vent (m/s)", 0.0, 100.0, 0.0)

    st.markdown("---")
    if st.button("Lancer la Pr√©diction"):
        if prediction_mode == "Param√®tres m√©t√©o uniquement":
            model_xgb = model_xgb1
            input_data = pd.DataFrame({
                "temperature_2m": [temp],
                "humidity_2m": [humidity],
                "pressure": [pressure],
                "precipitation": [precipitation]
            })
        elif prediction_mode == "Param√®tres m√©t√©o & temps":
            model_xgb = model_xgb2
            input_data = pd.DataFrame({
                "temperature_2m": [temp],
                "humidity_2m": [humidity],
                "pressure": [pressure],
                "precipitation": [precipitation],
                "year": [timestamp.year],
                "month": [timestamp.month],
                "hour": [timestamp.hour]
            })
            # Ajouter les encodages cycliques
            input_data['month_sin'] = np.sin(2 * np.pi * input_data['month'] / 12)
            input_data['month_cos'] = np.cos(2 * np.pi * input_data['month'] / 12)
            input_data['hour_sin'] = np.sin(2 * np.pi * input_data['hour'] / 24)
            input_data['hour_cos'] = np.cos(2 * np.pi * input_data['hour'] / 24)
            # Supprimer la colonne month non n√©cessaire pour la pr√©diction
            input_data = input_data.drop(columns=['month', 'hour'])
        elif prediction_mode == "Temps uniquement":  # Timestamp uniquement
            # model_xgb = model_xgb3
            # input_data = pd.DataFrame({"timestamp": [timestamp]})
            input_data = pd.DataFrame({
                "year": [timestamp.year],
                "month": [timestamp.month],
                "hour": [timestamp.hour]
            })
            # Ajouter les encodages cycliques
            input_data['month_sin'] = np.sin(2 * np.pi * input_data['month'] / 12)
            input_data['month_cos'] = np.cos(2 * np.pi * input_data['month'] / 12)
            input_data['hour_sin'] = np.sin(2 * np.pi * input_data['hour'] / 24)
            input_data['hour_cos'] = np.cos(2 * np.pi * input_data['hour'] / 24)
            # Supprimer la colonne month non n√©cessaire pour la pr√©diction
            input_data = input_data.drop(columns=['month', 'hour'])
        elif prediction_mode == "Vitesse du vents":
            a = 1 #inutile
            
        # Pr√©diction
        try:
            # Calcul de la puissance pour la vitesse du vents
            if prediction_mode == "Vitesse du vents":
                power_pred = power_curve(wind_speed)
                st.success(f"**Puissance estim√©e :** {power_pred:.3f} kW")
            else:
                col1, col2 = st.columns([3, 9])
                with col1:
                    # Calcul de la puissance pour la vitesse du vents predit
                    wind_speed_pred = model_xgb.predict(input_data)
                    power_pred = power_curve(wind_speed_pred)
                    st.success(f"**Vitesse du vent pr√©dite :** {wind_speed_pred[0]:.3f} m/s")
                    st.success(f"**Puissance estim√©e :** {power_pred[0]:.3f} kW")
                with col2:
                    # Graphique de la courbe de puissance
                    fig = go.Figure()
                    fig.add_trace(go.Scatter(x=df_curve_power["wind_speed"], y=df_curve_power["power"], mode="lines", name="Courbe de puissance"))
                    fig.add_trace(go.Scatter(x=[wind_speed_pred[0]], y=[power_pred[0]], mode="markers", name="Pr√©diction", marker=dict(size=15)))
                    fig.update_layout(title="Courbe de Puissance", xaxis_title="Vitesse du Vent (m/s)", yaxis_title="Puissance (kW)")
                    st.plotly_chart(fig)
        except Exception as e:
            st.error(f"Erreur lors de la pr√©diction : {str(e)}")

# Page de R√©sultats
elif page == "R√©sultats":
    st.title("Performance des Mod√®les üìä")
    st.markdown("Analyse des m√©triques de performance du mod√®le XGBoost sur les donn√©es de test.")

    df_test = df.head(20000).copy()
    # Feature engineering pour le timestamp
    df_test['year'] = df_test['timestamp'].dt.year
    df_test['month'] = df_test['timestamp'].dt.month
    df_test['day'] = df_test['timestamp'].dt.day
    df_test['hour'] = df_test['timestamp'].dt.hour

    # Encodage cyclique pour capturer la saisonnalit√©
    df_test['month_sin'] = np.sin(2 * np.pi * df_test['month'] / 12)
    df_test['month_cos'] = np.cos(2 * np.pi * df_test['month'] / 12)
    df_test['hour_sin'] = np.sin(2 * np.pi * df_test['hour'] / 24)
    df_test['hour_cos'] = np.cos(2 * np.pi * df_test['hour'] / 24)


    # mse = mean_squared_error(y_test, y_pred)
    # mae = mean_absolute_error(y_test, y_pred)
    # r2 = r2_score(y_test, y_pred)

    # Sans date
    st.markdown("### Mod√®le 1 : Sans Donn√©es Temporelles")
    col1, col2 = st.columns(2)
    model_xgb = model_xgb1
    with col1:
        rmse = 0.03
        st.markdown(f"<div class='metric-card'><h3>RMSE</h3><p>{rmse}</p></div>", unsafe_allow_html=True)
    with col2:
        r2 = 0.9994922564198703
        st.markdown(f"<div class='metric-card'><h3>R¬≤</h3><p>{r2}</p></div>", unsafe_allow_html=True)
    
    # Variables
    x_test = df_test[["temperature_2m", "humidity_2m", "pressure", "precipitation"]] #En fonction de ces param√®tre
    y_test = df_test["wind_speed_50m"] #On va predire la vitesse du vent
    # Test Prediction
    y_pred = model_xgb.predict(x_test)
    # Graphique de pr√©diction vs r√©el
    fig = px.scatter(x=y_test, y=y_pred, labels={"x": "Vitesse R√©elle (m/s)", "y": "Vitesse Pr√©dite (m/s)"}, title="Pr√©dictions vs R√©alit√©")
    fig.add_trace(go.Scatter(x=[y_test.min(), y_test.max()], y=[y_test.min(), y_test.max()], mode="lines", name="Id√©al"))
    st.plotly_chart(fig)
    # Interpretation
    st.success("Ce mod√®le, bien qu'utilisant uniquement les variables m√©t√©orologiques brutes (temp√©rature, humidit√©, pression, pr√©cipitations), d√©montre d√©j√† une capacit√© tr√®s √©lev√©e √† pr√©dire la vitesse du vent.")
    
    # Avec date
    st.markdown("### Mod√®le 2 : Avec Donn√©es Temporelles")
    col1, col2 = st.columns(2) 
    model_xgb = model_xgb2
    with col1:
        rmse = 0.00197582389865094
        st.markdown(f"<div class='metric-card'><h3>RMSE</h3><p>{rmse:.2f}</p></div>", unsafe_allow_html=True)
    with col2:
        r2 = 0.9999980235424452
        st.markdown(f"<div class='metric-card'><h3>R¬≤</h3><p>{r2:.2f}</p></div>", unsafe_allow_html=True)
    
    # Variable
    x_test = df_test[["temperature_2m", "humidity_2m", "pressure", "precipitation", 
        "year", "month_sin", "month_cos", "hour_sin", "hour_cos"]]
    y_test = df_test["wind_speed_50m"]
    # Test Prediction
    y_pred = model_xgb.predict(x_test)
    # Graphique de pr√©diction vs r√©el
    fig = px.scatter(x=y_test, y=y_pred, labels={"x": "Vitesse R√©elle (m/s)", "y": "Vitesse Pr√©dite (m/s)"}, title="Pr√©dictions vs R√©alit√©")
    fig.add_trace(go.Scatter(x=[y_test.min(), y_test.max()], y=[y_test.min(), y_test.max()], mode="lines", name="Id√©al"))
    st.plotly_chart(fig)
    # Interpretation
    st.success("L'ajout des caract√©ristiques temporelles (ann√©e, mois, heure, encod√©es cycliquement) a significativement am√©lior√© la performance du mod√®le, le portant √† un niveau de pr√©cision quasi-parfait.")
    
    
# Page de Documentation
elif page == "Documentation":
    st.title("Documentation du Projet üìö")
    st.header("Coming Soon...")
    st.markdown("""
    ## Introduction
    Ce projet vise √† pr√©dire la vitesse du vent √† 50m d'altitude √† partir de donn√©es m√©t√©orologiques fournies par NASA POWER.  
    La vitesse pr√©dite est ensuite utilis√©e pour estimer la puissance g√©n√©r√©e par une √©olienne Enercon E48/800 √† l'aide d'une courbe de puissance.

    ## Donn√©es
    - **Source** : NASA POWER
    - **Colonnes utilis√©es** :
        - `timestamp` : Date et heure
        - `temperature_2m` : Temp√©rature √† 2m
        - `humidity_2m` : Humidit√© √† 2m
        - `pressure` : Pression atmosph√©rique
        - `precipitation` : Pr√©cipitations
        - `wind_speed_50m` : Vitesse du vent √† 50m

    ## Mod√®le
    - **Algorithme** : XGBoost Regressor
    - **Param√®tres** : 1,000,000 estimateurs, taux d'apprentissage = 1
    - **M√©triques** : MSE, MAE, R¬≤

    ## Courbe de Puissance
    La courbe de puissance de l'√©olienne Enercon E48/800 est interpol√©e √† partir de donn√©es fournies dans `courbe_puissance.csv`.
    """)

# Page √Ä Propos
elif page == "√Ä propos":
    st.title("√Ä Propos du Projet ‚ÑπÔ∏è")
    st.header("Coming Soon ...")
    # st.markdown("""
    # Ce projet a √©t√© d√©velopp√© dans le cadre de l'exploration des √©nergies renouvelables, avec un focus sur l'√©nergie √©olienne.  
    # Notre objectif est de d√©montrer comment les technologies d'apprentissage automatique peuvent optimiser la production d'√©nergie verte.    
    # 
    # """, unsafe_allow_html=True)
    st.markdown("""
                E-mail: <a href="esperaakakpo6@gmail.com">esperaakakpo6@gmail.com</a>
                """, unsafe_allow_html=True)
    
